#include <stdlib.h>
#include "board.h"
#include "opening.h"

#define SIZEOF_ARRAY(ar) (sizeof(ar)/sizeof((ar)[0]))

// All possible first moves for Violet
const unsigned short violet_first_moves[] = {
    0x0044, 0x0034, 0x0043, 0x0054, 0x0045, 0x0855, 0x0854, 0x0844,
    0x0834, 0x0843, 0x0935, 0x0934, 0x0944, 0x0954, 0x0943, 0x0a35,
    0x0a45, 0x0a44, 0x0a43, 0x0a54, 0x0b55, 0x0b45, 0x0b44, 0x0b43,
    0x0b34, 0x0c33, 0x0c34, 0x0c44, 0x0c54, 0x0c45, 0x0d53, 0x0d54,
    0x0d44, 0x0d34, 0x0d45, 0x0e53, 0x0e43, 0x0e44, 0x0e45, 0x0e34,
    0x0f33, 0x0f43, 0x0f44, 0x0f45, 0x0f54, 0x1044, 0x1034, 0x1033,
    0x1054, 0x1055, 0x1144, 0x1154, 0x1153, 0x1134, 0x1135, 0x1244,
    0x1243, 0x1253, 0x1245, 0x1235, 0x1344, 0x1343, 0x1333, 0x1345,
    0x1355, 0x1844, 0x1834, 0x1833, 0x1845, 0x1855, 0x1944, 0x1954,
    0x1953, 0x1945, 0x1935, 0x1a44, 0x1a43, 0x1a53, 0x1a34, 0x1a35,
    0x1b44, 0x1b43, 0x1b33, 0x1b54, 0x1b55, 0x2044, 0x2034, 0x2024,
    0x2045, 0x2046, 0x2144, 0x2154, 0x2164, 0x2145, 0x2146, 0x2244,
    0x2243, 0x2242, 0x2234, 0x2224, 0x2344, 0x2343, 0x2342, 0x2354,
    0x2364, 0x2844, 0x2845, 0x2843, 0x2853, 0x2833, 0x2a44, 0x2a34,
    0x2a54, 0x2a55, 0x2a53, 0x2b44, 0x2b54, 0x2b34, 0x2b35, 0x2b33,
    0x2c44, 0x2c43, 0x2c45, 0x2c35, 0x2c55, 0x3045, 0x3044, 0x3034,
    0x3043, 0x3042, 0x3145, 0x3144, 0x3154, 0x3143, 0x3142, 0x3234,
    0x3244, 0x3243, 0x3254, 0x3264, 0x3354, 0x3344, 0x3343, 0x3334,
    0x3324, 0x3443, 0x3444, 0x3454, 0x3445, 0x3446, 0x3543, 0x3544,
    0x3534, 0x3545, 0x3546, 0x3654, 0x3644, 0x3645, 0x3634, 0x3624,
    0x3734, 0x3744, 0x3745, 0x3754, 0x3764, 0x3844, 0x3843, 0x3853,
    0x3845, 0x3855, 0x3944, 0x3943, 0x3933, 0x3945, 0x3935, 0x3a44,
    0x3a54, 0x3a55, 0x3a34, 0x3a35, 0x3e44, 0x3e34, 0x3e33, 0x3e54,
    0x3e53, 0x4045, 0x4054, 0x4044, 0x4053, 0x4043, 0x4145, 0x4134,
    0x4144, 0x4133, 0x4143, 0x4234, 0x4245, 0x4244, 0x4255, 0x4254,
    0x4354, 0x4345, 0x4344, 0x4335, 0x4334, 0x4443, 0x4434, 0x4444,
    0x4435, 0x4445, 0x4543, 0x4554, 0x4544, 0x4555, 0x4545, 0x4654,
    0x4643, 0x4644, 0x4633, 0x4634, 0x4734, 0x4743, 0x4744, 0x4753,
    0x4754, 0x4846, 0x4845, 0x4844, 0x4854, 0x4853, 0x4946, 0x4945,
    0x4944, 0x4934, 0x4933, 0x4a24, 0x4a34, 0x4a44, 0x4a45, 0x4a55,
    0x4b64, 0x4b54, 0x4b44, 0x4b45, 0x4b35, 0x4c42, 0x4c43, 0x4c44,
    0x4c34, 0x4c35, 0x4d42, 0x4d43, 0x4d44, 0x4d54, 0x4d55, 0x4e64,
    0x4e54, 0x4e44, 0x4e43, 0x4e33, 0x4f24, 0x4f34, 0x4f44, 0x4f43,
    0x4f53, 0x5044, 0x5043, 0x5046, 0x5045, 0x5053, 0x5144, 0x5143,
    0x5146, 0x5145, 0x5133, 0x5244, 0x5254, 0x5224, 0x5234, 0x5255,
    0x5344, 0x5334, 0x5364, 0x5354, 0x5335, 0x5444, 0x5445, 0x5442,
    0x5443, 0x5435, 0x5544, 0x5545, 0x5542, 0x5543, 0x5555, 0x5644,
    0x5634, 0x5664, 0x5654, 0x5633, 0x5744, 0x5754, 0x5724, 0x5734,
    0x5753, 0x5844, 0x5843, 0x5842, 0x5845, 0x5846, 0x5a44, 0x5a54,
    0x5a64, 0x5a34, 0x5a24, 0x6054, 0x6044, 0x6043, 0x6033, 0x6134,
    0x6144, 0x6143, 0x6153, 0x6245, 0x6244, 0x6254, 0x6253, 0x6345,
    0x6344, 0x6334, 0x6333, 0x6844, 0x6834, 0x6843, 0x6833, 0x7044,
    0x7034, 0x7043, 0x7045, 0x7144, 0x7154, 0x7143, 0x7145, 0x7244,
    0x7243, 0x7254, 0x7234, 0x7644, 0x7645, 0x7634, 0x7654, 0x7844,
    0x7845, 0x7843, 0x7853, 0x7944, 0x7945, 0x7943, 0x7933, 0x7a44,
    0x7a34, 0x7a54, 0x7a55, 0x7b44, 0x7b54, 0x7b34, 0x7b35, 0x7c44,
    0x7c43, 0x7c45, 0x7c35, 0x7d44, 0x7d43, 0x7d45, 0x7d55, 0x7e44,
    0x7e54, 0x7e34, 0x7e33, 0x7f44, 0x7f34, 0x7f54, 0x7f53, 0x8044,
    0x8043, 0x8042, 0x8045, 0x8244, 0x8254, 0x8264, 0x8234, 0x8844,
    0x8834, 0x8845, 0x8944, 0x8954, 0x8945, 0x8a44, 0x8a43, 0x8a34,
    0x8b44, 0x8b43, 0x8b54, 0x9044, 0x9043, 0x9045, 0x9244, 0x9254,
    0x9234, 0x9844, 0x9843, 0x9a44, 0x9a54, 0xa044, 0
};

// All possible first moves for Orange
const unsigned short orange_first_moves[] = {
    0x0099, 0x0089, 0x0098, 0x00a9, 0x009a, 0x08aa, 0x08a9, 0x0899,
    0x0889, 0x0898, 0x098a, 0x0989, 0x0999, 0x09a9, 0x0998, 0x0a8a,
    0x0a9a, 0x0a99, 0x0a98, 0x0aa9, 0x0baa, 0x0b9a, 0x0b99, 0x0b98,
    0x0b89, 0x0c88, 0x0c89, 0x0c99, 0x0ca9, 0x0c9a, 0x0da8, 0x0da9,
    0x0d99, 0x0d89, 0x0d9a, 0x0ea8, 0x0e98, 0x0e99, 0x0e9a, 0x0e89,
    0x0f88, 0x0f98, 0x0f99, 0x0f9a, 0x0fa9, 0x1099, 0x1089, 0x1088,
    0x10a9, 0x10aa, 0x1199, 0x11a9, 0x11a8, 0x1189, 0x118a, 0x1299,
    0x1298, 0x12a8, 0x129a, 0x128a, 0x1399, 0x1398, 0x1388, 0x139a,
    0x13aa, 0x1899, 0x1889, 0x1888, 0x189a, 0x18aa, 0x1999, 0x19a9,
    0x19a8, 0x199a, 0x198a, 0x1a99, 0x1a98, 0x1aa8, 0x1a89, 0x1a8a,
    0x1b99, 0x1b98, 0x1b88, 0x1ba9, 0x1baa, 0x2099, 0x2089, 0x2079,
    0x209a, 0x209b, 0x2199, 0x21a9, 0x21b9, 0x219a, 0x219b, 0x2299,
    0x2298, 0x2297, 0x2289, 0x2279, 0x2399, 0x2398, 0x2397, 0x23a9,
    0x23b9, 0x2899, 0x289a, 0x2898, 0x28a8, 0x2888, 0x2a99, 0x2a89,
    0x2aa9, 0x2aaa, 0x2aa8, 0x2b99, 0x2ba9, 0x2b89, 0x2b8a, 0x2b88,
    0x2c99, 0x2c98, 0x2c9a, 0x2c8a, 0x2caa, 0x309a, 0x3099, 0x3089,
    0x3098, 0x3097, 0x319a, 0x3199, 0x31a9, 0x3198, 0x3197, 0x3289,
    0x3299, 0x3298, 0x32a9, 0x32b9, 0x33a9, 0x3399, 0x3398, 0x3389,
    0x3379, 0x3498, 0x3499, 0x34a9, 0x349a, 0x349b, 0x3598, 0x3599,
    0x3589, 0x359a, 0x359b, 0x36a9, 0x3699, 0x369a, 0x3689, 0x3679,
    0x3789, 0x3799, 0x379a, 0x37a9, 0x37b9, 0x3899, 0x3898, 0x38a8,
    0x389a, 0x38aa, 0x3999, 0x3998, 0x3988, 0x399a, 0x398a, 0x3a99,
    0x3aa9, 0x3aaa, 0x3a89, 0x3a8a, 0x3e99, 0x3e89, 0x3e88, 0x3ea9,
    0x3ea8, 0x409a, 0x40a9, 0x4099, 0x40a8, 0x4098, 0x419a, 0x4189,
    0x4199, 0x4188, 0x4198, 0x4289, 0x429a, 0x4299, 0x42aa, 0x42a9,
    0x43a9, 0x439a, 0x4399, 0x438a, 0x4389, 0x4498, 0x4489, 0x4499,
    0x448a, 0x449a, 0x4598, 0x45a9, 0x4599, 0x45aa, 0x459a, 0x46a9,
    0x4698, 0x4699, 0x4688, 0x4689, 0x4789, 0x4798, 0x4799, 0x47a8,
    0x47a9, 0x489b, 0x489a, 0x4899, 0x48a9, 0x48a8, 0x499b, 0x499a,
    0x4999, 0x4989, 0x4988, 0x4a79, 0x4a89, 0x4a99, 0x4a9a, 0x4aaa,
    0x4bb9, 0x4ba9, 0x4b99, 0x4b9a, 0x4b8a, 0x4c97, 0x4c98, 0x4c99,
    0x4c89, 0x4c8a, 0x4d97, 0x4d98, 0x4d99, 0x4da9, 0x4daa, 0x4eb9,
    0x4ea9, 0x4e99, 0x4e98, 0x4e88, 0x4f79, 0x4f89, 0x4f99, 0x4f98,
    0x4fa8, 0x5099, 0x5098, 0x509b, 0x509a, 0x50a8, 0x5199, 0x5198,
    0x519b, 0x519a, 0x5188, 0x5299, 0x52a9, 0x5279, 0x5289, 0x52aa,
    0x5399, 0x5389, 0x53b9, 0x53a9, 0x538a, 0x5499, 0x549a, 0x5497,
    0x5498, 0x548a, 0x5599, 0x559a, 0x5597, 0x5598, 0x55aa, 0x5699,
    0x5689, 0x56b9, 0x56a9, 0x5688, 0x5799, 0x57a9, 0x5779, 0x5789,
    0x57a8, 0x5899, 0x5898, 0x5897, 0x589a, 0x589b, 0x5a99, 0x5aa9,
    0x5ab9, 0x5a89, 0x5a79, 0x60a9, 0x6099, 0x6098, 0x6088, 0x6189,
    0x6199, 0x6198, 0x61a8, 0x629a, 0x6299, 0x62a9, 0x62a8, 0x639a,
    0x6399, 0x6389, 0x6388, 0x6899, 0x6889, 0x6898, 0x6888, 0x7099,
    0x7089, 0x7098, 0x709a, 0x7199, 0x71a9, 0x7198, 0x719a, 0x7299,
    0x7298, 0x72a9, 0x7289, 0x7699, 0x769a, 0x7689, 0x76a9, 0x7899,
    0x789a, 0x7898, 0x78a8, 0x7999, 0x799a, 0x7998, 0x7988, 0x7a99,
    0x7a89, 0x7aa9, 0x7aaa, 0x7b99, 0x7ba9, 0x7b89, 0x7b8a, 0x7c99,
    0x7c98, 0x7c9a, 0x7c8a, 0x7d99, 0x7d98, 0x7d9a, 0x7daa, 0x7e99,
    0x7ea9, 0x7e89, 0x7e88, 0x7f99, 0x7f89, 0x7fa9, 0x7fa8, 0x8099,
    0x8098, 0x8097, 0x809a, 0x8299, 0x82a9, 0x82b9, 0x8289, 0x8899,
    0x8889, 0x889a, 0x8999, 0x89a9, 0x899a, 0x8a99, 0x8a98, 0x8a89,
    0x8b99, 0x8b98, 0x8ba9, 0x9099, 0x9098, 0x909a, 0x9299, 0x92a9,
    0x9289, 0x9899, 0x9898, 0x9a99, 0x9aa9, 0xa099, 0
};

// Unique first moves of size=5 for Violet
const unsigned short violet_unique_first_moves[] = {
    0x0044, 0x0043, 0x0054, 0x0855, 0x0854, 0x0844, 0x0834, 0x0843,
    0x0a35, 0x0a45, 0x0a44, 0x0a43, 0x0a54, 0x0c33, 0x0c34, 0x0c44,
    0x0c54, 0x0c45, 0x0e53, 0x0e43, 0x0e44, 0x0e45, 0x0e34, 0x1044,
    0x1034, 0x1033, 0x1054, 0x1055, 0x1244, 0x1243, 0x1253, 0x1245,
    0x1235, 0x1844, 0x1834, 0x1833, 0x1845, 0x1855, 0x1944, 0x1954,
    0x1953, 0x1a44, 0x1a43, 0x1a53, 0x2044, 0x2034, 0x2024, 0x2045,
    0x2046, 0x2144, 0x2154, 0x2164, 0x2244, 0x2243, 0x2242, 0x2844,
    0x2845, 0x2843, 0x2853, 0x2833, 0x2a44, 0x2a34, 0x2a54, 0x2a55,
    0x2a53, 0x3045, 0x3044, 0x3034, 0x3043, 0x3042, 0x3234, 0x3244,
    0x3243, 0x3254, 0x3264, 0x3443, 0x3444, 0x3454, 0x3445, 0x3446,
    0x3654, 0x3644, 0x3645, 0x3634, 0x3624, 0x3844, 0x3843, 0x3853,
    0x3845, 0x3855, 0x3944, 0x3943, 0x3933, 0x3945, 0x3935, 0x4045,
    0x4054, 0x4044, 0x4053, 0x4043, 0x4234, 0x4245, 0x4244, 0x4255,
    0x4254, 0x4443, 0x4434, 0x4444, 0x4435, 0x4445, 0x4654, 0x4643,
    0x4644, 0x4633, 0x4634, 0x4846, 0x4845, 0x4844, 0x4854, 0x4853,
    0x4a24, 0x4a34, 0x4a44, 0x4a45, 0x4a55, 0x4c42, 0x4c43, 0x4c44,
    0x4c34, 0x4c35, 0x4e64, 0x4e54, 0x4e44, 0x4e43, 0x4e33, 0x5044,
    0x5043, 0x5046, 0x5045, 0x5053, 0x5244, 0x5254, 0x5224, 0x5234,
    0x5255, 0x5444, 0x5445, 0x5442, 0x5443, 0x5435, 0x5644, 0x5634,
    0x5664, 0x5654, 0x5633, 0x5844, 0x5843, 0x5842, 0x5845, 0x5846,
    0
};

// Unique first moves of size=5 for Orange
const unsigned short orange_unique_first_moves[] = {
    0x0099, 0x0098, 0x00a9, 0x08aa, 0x08a9, 0x0899, 0x0889, 0x0898,
    0x0a8a, 0x0a9a, 0x0a99, 0x0a98, 0x0aa9, 0x0c88, 0x0c89, 0x0c99,
    0x0ca9, 0x0c9a, 0x0ea8, 0x0e98, 0x0e99, 0x0e9a, 0x0e89, 0x1099,
    0x1089, 0x1088, 0x10a9, 0x10aa, 0x1299, 0x1298, 0x12a8, 0x129a,
    0x128a, 0x1899, 0x1889, 0x1888, 0x189a, 0x18aa, 0x1999, 0x19a9,
    0x19a8, 0x1a99, 0x1a98, 0x1aa8, 0x2099, 0x2089, 0x2079, 0x209a,
    0x209b, 0x2199, 0x21a9, 0x21b9, 0x2299, 0x2298, 0x2297, 0x2899,
    0x289a, 0x2898, 0x28a8, 0x2888, 0x2a99, 0x2a89, 0x2aa9, 0x2aaa,
    0x2aa8, 0x309a, 0x3099, 0x3089, 0x3098, 0x3097, 0x3289, 0x3299,
    0x3298, 0x32a9, 0x32b9, 0x3498, 0x3499, 0x34a9, 0x349a, 0x349b,
    0x36a9, 0x3699, 0x369a, 0x3689, 0x3679, 0x3899, 0x3898, 0x38a8,
    0x389a, 0x38aa, 0x3999, 0x3998, 0x3988, 0x399a, 0x398a, 0x409a,
    0x40a9, 0x4099, 0x40a8, 0x4098, 0x4289, 0x429a, 0x4299, 0x42aa,
    0x42a9, 0x4498, 0x4489, 0x4499, 0x448a, 0x449a, 0x46a9, 0x4698,
    0x4699, 0x4688, 0x4689, 0x489b, 0x489a, 0x4899, 0x48a9, 0x48a8,
    0x4a79, 0x4a89, 0x4a99, 0x4a9a, 0x4aaa, 0x4c97, 0x4c98, 0x4c99,
    0x4c89, 0x4c8a, 0x4eb9, 0x4ea9, 0x4e99, 0x4e98, 0x4e88, 0x5099,
    0x5098, 0x509b, 0x509a, 0x50a8, 0x5299, 0x52a9, 0x5279, 0x5289,
    0x52aa, 0x5499, 0x549a, 0x5497, 0x5498, 0x548a, 0x5699, 0x5689,
    0x56b9, 0x56a9, 0x5688, 0x5899, 0x5898, 0x5897, 0x589a, 0x589b,
    0
};

Move random_move(Board* b)
{
    Move movables[1500];
    int nmove = b->movables(movables);
    int i = (int)((rand() / ((double)RAND_MAX+1.0f)) * nmove);
    return movables[i];
}

static Move first_move()
{
    static const unsigned short moves[] = {
	0x0a45 /*56t2*/, 0x0054 /*65u0*/, 0x2c55 /*66p4*/, 0x3445 /*56o4*/,
	0x0e45 /*56t6*/, 0x3654 /*65o6*/, 0x0855 /*66t0*/, 0x1a53 /*64r2*/,
	0x0a44 /*55t2*/, 0x3264 /*75o2*/
    };
    int i = (int)((rand() / ((double)RAND_MAX+1.0f)) * SIZEOF_ARRAY(moves));
    return moves[i];
}

Move opening_move(Board* b)
{
    if (b->turn() == 0)
	return first_move();
//    if (b->turn() < 2)
//	return random_move(b);
    return INVALID_MOVE;
}

#ifdef MAKE_UNIQUE_MOVE_TABLE
#include <vector>
#include <algorithm>

void make_violet_unique_first_moves()
{
    vector<Move> unique_moves;
    for (const unsigned short* ptr = violet_first_moves; *ptr; ++ptr) {
	Move m(*ptr);
	Block* block = block_set[m.block_id()];
	if (block->size < 5)
	    continue;
	switch (block->name()) {
	case 'k': case 'l': case 'm': case 'o': case 's': case 't':
	    if (m.direction() % 2 == 1)
		continue;
	    break;
	case 'j':
	    if (m.direction() != 0)
		continue;
	    break;
	case 'n':
	    if (m.direction() != 0 && m.direction() != 1)
		continue;
	    break;
	case 'p':
	    if (m.direction() != 0 && m.direction() != 2)
		continue;
	    break;
	case 'q':
	case 'r':
	    if (m.direction() == 3)
		continue;
	    if ((m.direction() == 1 || m.direction() == 2) && m.x() < m.y())
		continue;
	    break;
	case 'u':
	    if (m.x() < m.y())
		continue;
	    break;
	}
	unique_moves.push_back(m);
    }

    vector<Move>::const_iterator begin = unique_moves.begin();
    vector<Move>::const_iterator end = unique_moves.end();
    for (const unsigned short* ptr = violet_first_moves; *ptr; ++ptr) {
	Move m(*ptr);
	if (block_set[m.block_id()]->size < 5)
	    continue;
	if (find(begin, end, m) == end &&
	    find(begin, end, m.mirror()) == end)
	    fprintf(stderr, "not found: %s\n", m.fourcc());
    }
    for (vector<Move>::const_iterator i = begin; i != end; ++i) {
	Move m = *i;
	if (find(begin, end, m.mirror()) != end) {
	    if (m.mirror() == m)
		fprintf(stderr, "mirror: 0x%04x\n", m.to_i());
	    else
		fprintf(stderr, "duplicated: %s\n", m.fourcc());
	}
	printf("0x%04x\n", m.to_i());
    }
}

int main(int argc, char *argv[])
{
    make_violet_unique_first_moves();
    return 0;
}
#endif
